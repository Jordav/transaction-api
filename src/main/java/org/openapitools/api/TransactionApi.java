/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.InlineObject;
import org.openapitools.model.InlineResponse200;
import org.openapitools.model.InlineResponse2001;
import org.openapitools.model.InlineResponse2002;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-07T13:55:52.047472600+01:00[Europe/Madrid]")
@Validated
@Api(value = "transaction", description = "the transaction API")
public interface TransactionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /transaction : Searches for transactions
     * Searches for transactions 
     *
     * @param accountIban The IBAN number of the account where the transaction (optional)
     * @param sort Sort by amount (ascending/descending) (optional)
     * @return Transactions correctly retrieved (status code 200)
     *         or Malformed expected data (status code 422)
     *         or Unexpected API error (status code 500)
     */
    @ApiOperation(value = "Searches for transactions", nickname = "transactionGet", notes = "Searches for transactions ", response = InlineResponse200.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transactions correctly retrieved", response = InlineResponse200.class),
        @ApiResponse(code = 422, message = "Malformed expected data"),
        @ApiResponse(code = 500, message = "Unexpected API error") })
    @GetMapping(
        value = "/transaction",
        produces = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> transactionGet(@ApiParam(value = "The IBAN number of the account where the transaction") @Valid @RequestParam(value = "account_iban", required = false) String accountIban,@ApiParam(value = "Sort by amount (ascending/descending)") @Valid @RequestParam(value = "sort", required = false) String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ \"Transaction reference 1\", \"Transaction reference 2\", \"Transaction reference 3\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /transaction : Creates a new transaction
     * Receive the transaction information and store it into the system. 
     *
     * @param inlineObject  (required)
     * @return Transaction correctly created (status code 200)
     *         or Transaction already exists (status code 409)
     *         or Malformed expected data (status code 422)
     *         or Unexpected API error (status code 500)
     */
    @ApiOperation(value = "Creates a new transaction", nickname = "transactionPost", notes = "Receive the transaction information and store it into the system. ", response = InlineResponse2001.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction correctly created", response = InlineResponse2001.class),
        @ApiResponse(code = 409, message = "Transaction already exists"),
        @ApiResponse(code = 422, message = "Malformed expected data"),
        @ApiResponse(code = 500, message = "Unexpected API error") })
    @PostMapping(
        value = "/transaction",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse2001> transactionPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject inlineObject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"12345A\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transaction/{reference}/status : Retrieves the status of a transaction
     * Based on the payload and some business rules, will return the status and additional information for a specific transaction.
     *
     * @param reference Transaction reference number (required)
     * @param channel The type of the channel that is asking for the status. It can be any of these values CLIENT, ATM, INTERNAL (optional)
     * @return Transaction status correctly retrieved (status code 200)
     *         or The transaction reference number does not exist (status code 404)
     *         or Malformed expected data (status code 422)
     *         or Unexpected API error (status code 500)
     */
    @ApiOperation(value = "Retrieves the status of a transaction", nickname = "transactionReferenceStatusGet", notes = "Based on the payload and some business rules, will return the status and additional information for a specific transaction.", response = InlineResponse2002.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction status correctly retrieved", response = InlineResponse2002.class),
        @ApiResponse(code = 404, message = "The transaction reference number does not exist"),
        @ApiResponse(code = 422, message = "Malformed expected data"),
        @ApiResponse(code = 500, message = "Unexpected API error") })
    @GetMapping(
        value = "/transaction/{reference}/status",
        produces = { "application/json" }
    )
    default ResponseEntity<InlineResponse2002> transactionReferenceStatusGet(@ApiParam(value = "Transaction reference number",required=true) @PathVariable("reference") String reference,@ApiParam(value = "The type of the channel that is asking for the status. It can be any of these values CLIENT, ATM, INTERNAL") @Valid @RequestParam(value = "channel", required = false) String channel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reference\" : \"12345A\", \"status\" : \"PENDING\", \"amount\" : 193.38, \"fee\" : 3.18 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
